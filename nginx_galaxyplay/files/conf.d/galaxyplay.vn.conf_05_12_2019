map $request_uri $backend {
    default     0;
    ~/browse(?P<webapp_uri>.*)    1;
    ~/title(?P<webapp_uri>.*)     1;
    ~/watch(?P<webapp_uri>.*)     "/webapp";
    ~/payment(?P<webapp_uri>.*)     "/webapp";
    ~/package(?P<webapp_uri>.*)     "/webapp";
    ~/account(?P<webapp_uri>.*)   "/webapp";
}

#proxy_cache_path /cache/statics keys_zone=staticcache:10m;

server {
    #listen 443 ssl http2 reuseport fastopen=2014 backlog=1024;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name galaxyplay.vn;

    ssl_certificate             /root/.acme.sh/galaxyplay.vn/fullchain.cer;
    ssl_certificate_key         /root/.acme.sh/galaxyplay.vn/galaxyplay.vn.key;
    ssl_protocols               TLSv1.2 TLSv1.3;
    ssl_session_cache           shared:SSL:20m; # 1MB store about 4000 sessions
    ssl_session_timeout         3h;
    ssl_early_data              on;
    ssl_ciphers                 'TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:!AES128';
    ssl_prefer_server_ciphers   on;   

    statsd_count "galaxyplay_prod01.request" 1;
    statsd_count "galaxyplay_prod01.pages.index_requests" 1;
    statsd_count "galaxyplay_prod01.pages.index_responses" 1 "$request_completion";
    statsd_count "galaxyplay_prod01.status.$status" 1;
    statsd_count "galaxyplay_prod01.traffic" "$bytes_sent";
    statsd_count "galaxyplay_prod01.cache.$upstream_cache_status" 1;
    statsd_timing "galaxyplay_prod01.index_response_time" "$request_time";
    statsd_timing "galaxyplay_prod01.upstream_response_time" "$upstream_response_time";
    access_log  /var/log/nginx/galaxyplay.log vhost;

    client_body_buffer_size     128k;
    client_header_buffer_size   1k;
    large_client_header_buffers 4 2k;
    client_body_timeout         3m;
    client_header_timeout       3m;
      
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt { alias /opt/robots.txt; }
    location ^~ /main/ {
        alias  /data/webroot/webapp/;

    }  
    location ^~ /smarttv {
       alias /data/fimplus-tv/dist/;
    }  
    location = / {
        include allowips.conf;
        access_by_lua_block {
            local ck        = require "resty.cookie"
            local jwt       = require "resty.jwt"
            local string    = require "resty.string"
            local cjson     = require "cjson"
            local cookie, err = ck:new()    
            if not cookie then
                ngx.exit(0)
            end
            -- Get variables
            local accesstoken, err = cookie:get("access-token")
            if not accesstoken then
                ngx.exit(0)
            end
            local jwtkey = "$2a$10$wJrsziiTHN0I8.jj3vH7M.IPKy0./PQ/HxhG0FPItK3xwVv3czH0q"
            local jwtObj = jwt:verify(jwtkey, accesstoken)
            if jwtObj["verified"] then
                return ngx.redirect("/browse")
            end
        }

        root /data/webroot;
        try_files $backend$uri $backend/$webapp_uri $backend/index.html @website;
    }
    location / {
        include allowips.conf;
        access_by_lua_block {
            ngx.log(ngx.ERR, "TOP: "..ngx.var.backend)
            if ngx.var.backend ~= "1" then 
                ngx.exit(0)
            end
            local ck        = require "resty.cookie"
            local jwt       = require "resty.jwt"
            local string    = require "resty.string"
            local cjson     = require "cjson"
            local cookie, err = ck:new()    
            if not cookie then
                ngx.exit(0)
            end
            -- Get variables
            local accesstoken, err = cookie:get("access-token")
            ngx.log(ngx.ERR, "here the access-token ", accesstoken)
            if not accesstoken then
                ngx.exit(0)
            end
            local jwtkey = "$2a$10$wJrsziiTHN0I8.jj3vH7M.IPKy0./PQ/HxhG0FPItK3xwVv3czH0q"
            local jwtObj = jwt:verify(jwtkey, accesstoken)
            if jwtObj["verified"] then
                ngx.var.backend = "/webapp"
            end
        }
        root /data/webroot;
        try_files $backend$uri $backend/$webapp_uri $backend/index.html @website;
    }
    location @website {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass https://10.10.4.124;
        proxy_buffers 8 4k;
        proxy_buffer_size 4k;
        #proxy_cache staticcache;
    }

    location /status {
        vhost_traffic_status_display;
        vhost_traffic_status_display_format html;
    }
}

server {
    listen 80;
    listen [::]:80;
    server_name _;
    return 301 https://$host$request_uri;
}

